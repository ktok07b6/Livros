
Here is the overview of architecture of Livros.

        [SQL]
          |
+---------------------+
|     [Scanner]       | livros.compiler
|         |           |
|    [ Parser ]       |
|         |           |
|  [Translate to IR]  |
+---------------------+
          |
+---------------------+
|    [Execute IR]     | livros.vm
+---------------------+
          |
+----------------------+
|[DB Abstraction Layer]| livros.db, livros.btree
+----------------------+
          |
+----------------------+
| [Storage Management] | livros.storage
+----------------------+
          |
       [ File ]

First of all, It is better to see livros/Livros.java to understand the overview.
Basic sequence is like bellow.

 - Livros.scan()
 - Livros.parse()
 - Livros.translate()
 - Livros.exec()


livros.compiler
===============

This package contains an intermediate representation of the SQL source and a classes for transforming it.

At first, Scanner generates Tokens from source SQL texts.
(src/livros/compiler/Scanner.java)

Token is a keyword, symbol or name and so on.
(src/livros/compiler/Token.java)

And then Parser builts a tree like structure from tokens.
(src/livros/compiler/Parser.java)

Normally this structure is called AST(Abstract Syntax Tree).
AST is translated to Virtual machine's instructions.
(src/livros/compiler/Translator.java)
The Visitor pattern is used here for implementation.
https://en.wikipedia.org/wiki/Visitor_pattern

For example, if you type the below SQL,

  SELECT name, age FROM student
  WHERE department = 'Mathematics' OR department = 'Physics';

then you get the below instructions.

  1: PUSHEXPR (OR (EQ @department 'Mathematics') (EQ @department 'Physics'))
  2: SELECT #livros_tmp#0 student
  3: PUSHEXPR 'name'
  4: PUSHEXPR @name
  5: PUSHEXPR 'age'
  6: PUSHEXPR @age
  7: PROJECTION #livros_tmp#1 #livros_tmp#0 2
  8: SHOW #livros_tmp#1

I'm not sure this instruction forms will be suitable for the database system...:(


livros.vm
=========

livros.vm.VM executes instructions generated above process.
(src/livros/vm/VM.java)
VM is also implemented by Visitor pattern.
This VM is stack based virtual machine.
https://en.wikipedia.org/wiki/Stack_machine


livros.db
=========

livros.db is an abstraction of relational database. it is controled by VM.


Table
-----

In Livros, there are two classes representing tables. One is a Table class that represents a regular table containing records, and the other is a DerivedTable class that stores only the index of the record.
(src/livros/db/Table.java)
(src/livros/db/DerivedTable.java)

The Database class manages the Table class representing the table and the DerivedTable storing the result of the selection operation.
The Database class is used by StorageManager when starting up the system
It is generated by reading the definition file.
(src/livros/db/DataBase.java)

(src/livros/storage/StorageManager.java)

The definition of each field of the table is represented by the Field class.
Various constraints are represented by Constraint and its derived classes.
(src/livros/db/Field.java)
(src/livros/db/Constraint.java and src/livros/db/***Const.java)


livros.storage
==============

this package defines the structure of the database file.
Livros generates three kinds of database files.
  - Database Definition File (src/livros/storage/DbFile.java)
  - Record File (src/livros/storage/RecordFile.java)
  - Index File  (src/livros/storage/IndexFile.java)


Database Definition File
------------------------

The database definition file includes database name, the number of tables and table definitions(schema).
(src/livros/storage/DbHeader.java)

(src/livros/storage/TableHeader.java)
(src/livros/storage/FieldHeader.java)


Record File
-----------

The record file includes records of the table.
(Generally, this kind of file called 'Heap'.)
The record file consist of the header and chunks.
each chunk size is fixed and It has a double linked list structure.
the chunk is consist of the header and records.
(src/livros/storage/ChunkHeader.java)
(src/livros/storage/ChunkManager.java)

ChunkManager deal with addition and deletion of a chunk.

Note that Livros does not support storing a record larger in size than a chunk.


Index File
----------

The index file is a file that includes the position information of a record in a specific record file.



livros.btree
============

Livros supported searching by B + tree index.
However, this is used only when either the right side or the left side of the comparison expression is a field reference and the primary key constraint or the unique constraint is specified in the field and the uniqueness is guaranteed.

Also, for simplicity of implementation, Livros dynamically builds B + trees on main memory. For this reason, we consume the main memory according to the number of records. In the case of a B + tree of a general database, nodes of the tree are constructed on the secondary memory.


